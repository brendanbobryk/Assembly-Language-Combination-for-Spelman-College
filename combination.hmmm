################################################################################
# Combinations C(n,k) solution
# Brendan Bobryk
################################################################################

################################################################################
# register usage
# STUDENTS MUST EXPLAIN ALL REGISTERS THEY USE AND FOR WHAT PURPOSE HERE
################################################################################
# r0 <- 0
# r1 <- n
# r2 <- k
# r3, r4, r5, r6, r7 <- temporary registers
# r8 <- -1 for error

# HMMMM pre-defined registers
# r13 Function return value
# r14 Function return address
# r15 Stack pointer

# STUIDENTS NEED TO ADD THEIR OWN ASSEMBLY CODE HERE

################################################################################
# main
################################################################################

# setn r15 1000 # sets the stack pointer to the address after usable memory

0 read r1 # read n
1 read r2 # read k

# validate input, n and k are both > 0
2 jltzn r1 24 # if n <=0, jump to error
3 jltzn r2 24 # if k <=0, jump to error

# calculate numerator
4 setn r3 1  # initialize result to 1
5 setn r4 2  # initialize loop counter to 2

6 mul r3 r3 r4 # multiply result by i until i > n
7 addn r4 1
8 jgtzn r1 6 # jump if r1 (n) > r4 (loop counter)

# calculate denominator
9 sub r5 r1 r2  # n - k
10 calln r14, 23 # call the factorial function
11 copy r6 r13  # store k! in r6
12 calln r14, 23  # call factorial function for (n-k)
13 mul r7 r6 r13  # multiply k! and (n-k)!
14 div r13 r3 r7  # calculate C(n,k)

15 write r13 # print the result
16 halt

################################################################################
# factorial function
################################################################################

17 read r1  # read input (x)
18 setn r3 1  # initialize result to 1
19 setn r4 2  # initialize loop counter to 2

20 mul r3 r3 r4 # multiply result by i until i > x
21 addn r4 1
22 jgtzn r1 22

23 copy r13 r3 # return the result

################################################################################
# error handling
################################################################################
24 setn r8 -1 # sets r8 to -1 for error
25 write r8  # print error result
26 halt