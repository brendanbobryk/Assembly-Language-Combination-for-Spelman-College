################################################################################
# Combinations C(n,k) solution
# Brendan Bobryk
################################################################################

################################################################################
# register usage
# STUDENTS MUST EXPLAIN ALL REGISTERS THEY USE AND FOR WHAT PURPOSE HERE
################################################################################
# r0 <- 0
# r1 <- n
# r2 <- k
# r3, r4, r5, r6, r7 <- temporary registers

# HMMMM pre-defined registers
# r13 Function return value
# r14 Function return address
# r15 Stack pointer

# STUDENTS NEED TO ADD THEIR OWN ASSEMBLY CODE HERE
################################################################################
# main
################################################################################
0 read r1           # Read n from user (input)
1 read r2           # Read k from user (input)
2 jltzn r1, 20      # If n <= 0, jump to error handling
3 jltzn r2, 20      # If k <= 0, jump to error handling

# Calculate n! using factorial function
4 copy r1, r1       # n is already in r1
5 calln r14, 23     # Call factorial function for n
6 copy r7, r13     # Store the result of n! in r7

# Calculate k! using factorial function
7 copy r5, r1       # Copy n to r5
8 copy r1, r2       # Copy k to r1
9 calln r14, 23     # Call factorial function for k
10 copy r6, r13     # Store the result of k! in r6
11 copy r1, r5       # Copy r5 to n

# Calculate (n-k)! using factorial function
12 sub r1, r1, r2    # r1 = n - k
13 calln r14, 23     # Call factorial function for (n-k)
14 copy r15, r13     # Store the result of (n - k)! in r15

# Calculate C(n, k)
15 mul r3, r6, r15  # Multiply k! and (n-k)!
16 jeqzn r3, 20      # If the divisor is zero, jump to error handling to avoid division by zero
17 div r3, r7, r3   # Divide n! by (k! * (n-k)!)
18 write r3          # Output the result
19 halt              # End program

################################################################################
# error handling
################################################################################

20 setn r3, -1 # Set result to -1 to indicate an error
21 write r3          # Print the error result
22 halt              # End program

################################################################################
# factorial function
################################################################################
# Factorial function: Calculate r13 = factorial(r1)
# r1: Input number to calculate factorial
# Returns factorial value in r13
23 setn r13, 1 # Initialize factorial result to 1
24 copy r4, r1       # Copy input value to r4 (loop counter)
25 jeqzn r4, 28      # If r4 is zero, skip to return
26 mul r13, r13, r4 # Multiply current result by r4
27 addn r4, -1       # Decrement r4
28 jnezn r4, 26 # If r4 is not zero, repeat the loop
29 jumpr r14         # Return to caller