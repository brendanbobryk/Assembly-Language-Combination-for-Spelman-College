0 read r1           # Read n from user (input)
1 read r2           # Read k from user (input)
2 jltzn r1, 32      # If n <= 0, jump to error handling
3 jltzn r2, 32      # If k <= 0, jump to error handling

# Calculate n! and store in r13
4 setn r3, 1        # Initialize factorial result to 1 (r3)
5 copy r4, r1       # Copy n to r4 (loop counter)
6 jeqzn r4, 10      # If r4 is zero, skip to end of factorial calculation
7 mul r3, r3, r4 # Multiply current result by counter (r3 = r3 * r4)
8 addn r4, -1       # Decrement counter (r4 = r4 - 1)
9 jnezn r4, 7       # If counter is not zero, repeat loop

# Store n! in r13
10 copy r13, r3 # Store the result of n! in r13

# Calculate k! and store in r14
11 setn r3, 1        # Reinitialize result to 1 for k! calculation
12 copy r4, r2       # Copy k to r4 (loop counter)
13 jeqzn r4, 17      # If k is zero, skip to end of factorial calculation
14 mul r3, r3, r4 # Multiply current result by counter (r3 = r3 * r4)
15 addn r4, -1       # Decrement counter (r4 = r4 - 1)
16 jnezn r4, 14      # If counter is not zero, repeat loop

# Store k! in r14
17 copy r14, r3 # Store the result of k! in r14

# Calculate (n-k)! and store in r15
18 sub r4, r1, r2    # r4 = n - k
19 setn r3, 1        # Reinitialize result to 1 for (n-k)! calculation
20 jeqzn r4, 27      # If (n - k) is zero, skip to end of factorial calculation
21 mul r3, r3, r4    # Multiply current result by counter (r3 = r3 * r4)
22 addn r4, -1       # Decrement counter (r4 = r4 - 1)
23 jnezn r4, 23      # If counter is not zero, repeat loop

# Store (n-k)! in r15
24 copy r15, r3      # Store the result of (n - k)! in r15

# Calculate C(n, k)
25 mul r3, r14, r15  # Multiply k! and (n-k)!
26 jeqzn r3, 32      # If the divisor is zero, jump to error handling to avoid division by zero
27 div r3, r13, r3   # Divide n! by (k! * (n-k)!)
28 write r3          # Output the result
29 halt              # End program

# Error handling section
30 setn r3, -1       # Set result to -1 to indicate an error
31 write r3          # Print the error result
32 halt              # End program
